L'idempotenza
=============

Una delle caratteristiche fondamentali dei sistemi di deploy automatico è che 
semplicemente ci piacerebbe poter avviare (senza pensieri) lo script anche 
seconda volta dopo la prima.

Il punto è che uno script di deploy è veramente automatico solo se posso 
avviarlo senza pensieri ogni volta che voglio, anche una volta di seguito 
all'altra e l'effetto dei due avvii deve essere lo stesso di un avvio solo.

Non ci piace che si spacchi tutto al secondo si spacca tutto solo perché tenti
di ricreare su DB una tabella che aveva già ricreato la volta precedente.

Non ci piace che dopo la seconda (o la terza) esecuzione comincio a trovarmi due
(o tre) nuovi utenti di test nel sistema che avrebbe dovuto creare (una volta)
lo script di deploy.

Non ci piace neanche quando dopo aver fatto il primo deploy "automatico" siamo
costretti a fare dei passi manuali di pulizia prima di lanciare il secondo 
deploy "automatico".

Nonostante il nome di origine matematico-algebrica l'idempotenza è un concetto
molto semplice e sta ad indicare la proprietà di alcuni operazioni il cui
effetto di ripetute applicazioni è lo stesso di un unica applicazione.

L'idempotenza "è come lavarsi le mani, se te le lavi una volta poi sono pulite,
se te le lavi ancora rimangono pulite e non succede niente di male". Infornare
una torta, invece, non è idempotente, dopo la prima "applicazione" abbiamo una
torta cotta, dopo la seconda una torta bruciata.

Alcuni degli strumenti di deploy e provisioning automatici hanno interi sistemi
di astrazioni per gestire l'idempotenza.

A me sembra invece che si possa ottenere usando dei modi molto semplici usando
gli strumenti già disponibili nel sistema operativo.

Di seguito mostrerò come ottenere l'idempotenza negli script di deploy usando 
gli strumenti già presenti nel sistema operativo, senza impazzire 
con framework complessi che richiedono mille dipendenze.


I quattro modi per ottenere l'idempotenza
=========================================

  - analizziamo il problema nell'esecuzione di un unico semplice comando
  - una volta che abbiamo capito il problema e le soluzioni con un solo comando possiamo applicare gli stessi principi a qualsiasi script più complesso
  - Immaginiamoci che l'unica cosa che faccia il nostro sistema di deploy è la creazione di una cartella
  - (un po' poco per un vero script di deploy però l'esempio serve per ridurre il numero di cose da capire per capire i concetti, più avanti vedremo come estendere il concetto a script in condizioni realistiche: migliaia di operazioni diverse sulle macchine target)
  - Ecco il nostro script contiene solo questo comando:
    
    $ mkdir cartella 
    $ 
    
  - Se usato "from scratch" (su un sistema appena inizializzato) sicuramente funziona.
  - Cosa succede se avviamo il comando una seconda volta?
    
    $ mkdir cartella
    mkdir: cartella: File exists
    $ 
    
  - Come si può risolvere questo problema?
  - Ascoltare risposte dal pubblico.
  
  - I 4 metodi per ottenere idempotenza negli script di deploy
  - 1) il metodo della ruspa: fare piazza pulita prima di apportare la modifica
    e.g.:
      rm -Rf cartella && mkdir cartella
  - 2) il metodo del minimo sforzo "se non c'è bisogno non lo faccio", a.k.a. "metodo della sonda"
      (e.g. "test -d cartella || mkdir cartella")
  - 3) usare il metodo della sovascrittura (non sempre possibile)
      (e.g. non è possibile con la creazione della cartella)
  - 4) usare l'idempotenza built-in in alcuni comandi
      (e.g. "mkdir -p cartella")
      - richiede conoscenza dei comandi (man mkdir)
      - a volte è la soluzione più pulita
  - 5) l'idempotenza per finta (e.g. mkdir cartella 2>/dev/null || true)

Esempi
======

  - Vediamo altri esempi con altri comandi:
  - "nginx --version || apt-get install nginx -y"
    - è un caso di idempotenza con sonda
  - ln -s source target
    - non è idempotente
  - ln -sf source target
    - ha un certo grado di idempotenza
    - è un idempotenza built-in con sovrascrittura
  - rm -Rf target && ln -s source target
    - qui usiamo il metodo della ruspa
    - ha un grado di idempotenza più alto del precedente

  - Alcuni comandi sono idempotenti di natura:
  - chown -R qmaill:root /var/log/qmail
  - chmod -R 750 /var/log/qmail 
  - Altri esempi 
    - unzip -h > /dev/null || sudo apt-get install unzip --yes
    - git --help > /dev/null || sudo apt-get install git --yes
    - nginx -v || sudo apt-get install nginx --yes

-eof