Il problema:

  - Facciamo uno script di deploy che installa un software su un server
  - Il software è un solo file di testo e renderlo disponibile via web dalla
    macchina target.
  - È un primo passo incrementale per arrivare ad installare un software più
    complesso.
  - La macchina di destinazione (macchina target) è una macchina virtuale
    creata con Vagrant
  - Durante la presentazione farò vedere due terminali di colori diversi, uno
    aperto sulla macchina di sviluppo e uno aperto sulla macchina target
  - Il deploy è finito quando è possibile scaricare il file txt da web:

     curl http://localhost:10080/
      
  - Alla partenza della demo la macchina *dovrebbe* essere stata già creata,
    accesa e provisionata

Requisiti aggiuntivi:

  - il deploy script tocca la macchina (uname -a) usando SSH
  - deploy di una pagina statica (hello-world.txt)
  - deploy di una servlet java
  - la servlet per funzionare richiede MySQL
  - la servlet che richiede il Sun di Oracle
  - per testare la servlet bisogna fare una fixture sul database
  - la configurazione di connessione al database cambia dall'ambiente di produzione a quello di produzione

Note:

  - (vagrant) la macchina vagrant si chiama 'default' perché 'default' è il nome di default
  - (test) diff <(curl -s http://localhost:10080/) - <<< 'Hello World'
  - (vagrant) Snapshot:
     - vagrant snapshot save start
     - vagrant snapshot restore start
  - (todo) config.vm.hostname
  - sberla: source_rel() { source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$1" }
  - GIT_SSH_COMMAND="ssh -F vagrant.ssh-config" \
      git push target:/home/vagrant/repo.git master
  - vagrant ssh-config --host target
  - how to install git:
    - git --version || sudo apt-get install git-core -y
  - copiare un file usando rsync over SSH:
    - rsync hello-world target:
    - rsync -e 'ssh -F vagrant.ssh-config' to-deploy-01/hello-world.txt default:
  - how to create a bare repository:
    - ssh target 'mkdir -p repo.git && cd repo.git && git init --bare'
  - how to create the working copy (non idempotent)
    - git clone repo.git/ working-copy
  - java servlet compiling:
    - javac -cp lib/servlet-api.jar example/HelloWorld.java
  - copy .class:
    - ssh target 'ls /var/lib/tomcat7/webapps/ROOT/WEB-INF/classes/HelloWorld.class'
  - check tomcat
    - ls downloads/apache-tomcat-7.0.68.tar.gz
  - tomcat has been downloaded from here:  
    - wget http://it.apache.contactlab.it/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.tar.gz
  - tomcat directories:
    - /etc/default/tomcat7 (file di configurazione)
    - /usr/share/tomcat7-admin/manager (applicazione manager)
    - /usr/share/tomcat7/lib (librerie tomcat)
    - /usr/lib/jvm/java-8-oracle
    - /var/lib/tomcat7/webapps
  - modi per risolvere: zsh: exec format error: script/deploy
    - mettere :
    - mettere " "
    - mettere true
    - mettere #!/bin/bash
  - Prompt
    - barra verde/rossa nel prompt della Bash:
      - PS1="\`if [ \$? = 0 ]; then printf \[\e[32m\]; else printf \[\e[31m\]; fi; printf \\$\e[0m\] \` $PS1"
    - prompt semplice in Zsh:
      - PS2="> "
    - Zsh:
      export PROMPT=$'%{\e[0;%(?.32.31)m%}'$'%(?.OK.KO)'" \$"$'%{\e[0m%}'" " # testing prompt
      export PS2="> " # simple continuation prompt
  - linea Vagrantfile per forwardare tomcat:
    - config.vm.network "forwarded_port", guest: 8080, host: 8080
  - l'uso di SSH config
    - vagrant ssh-config >> ~/.ssh/config
  - git log  --oneline --graph --color
  - data dir: - vagrant ssh -c "ls /vagrant"
  - curl --silent --output /dev/null --write-out "%{http_code}"  "http://localhost:8080/"
  - deploy della servlet:
    cp /vagrant/.../HelloWorld.class /var/lib/tomcat7/webapps/ROOT
  - Java
    - sudo add-apt-repository "deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main" --yes 
    - sudo apt-get update
    - echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
    - echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
    - sudo apt-get install oracle-java7-installer --yes --force-yes # --force-yes per evitare problemi di chiave
  - tutorial http://www.tutorialspoint.com/servlets/servlets-first-example.htm
      mkdir -p /var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml
      cat >/var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml << \'
      <servlet>
         <servlet-name>HelloWorld</servlet-name>
         <servlet-class>HelloWorld</servlet-class>
      </servlet>

      <servlet-mapping>
         <servlet-name>HelloWorld</servlet-name>
         <url-pattern>/HelloWorld</url-pattern>
      </servlet-mapping>
      '
  - curl --silent --output /dev/null  --write-out "%{http_code}"  "http://localhost:8080/hello-world"
  - -> 200 not 404


Per installare mysql senza dover mettere la password:

    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password my_password'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password my_password'
    sudo apt-get -y install mysql-server

Per sapere le selections:

    sudo apt-get install -y debconf-utils
    debconf-get-selections

-eof
