Il problema:

  - Scrivere uno script di deploy che faccia il deploy automatico di un software su un server
  - Il server è una macchina Vagrant accessibile con "vagrant ssh"
  - Il problema è composto da tre passi da risolvere in sequenza
  - Ci sono tre passi per simulare un software che cambia nel tempo e quindi richiede che lo script di deploy si evolva nel tempo.

Introduzione:

  - Il mio obiettivo per questa presentazione è condividere con il pubblico
    alcune delle tecniche che uso per sviluppare gli script di deploy sul
    lavoro.
  - Il modo che ho scelto per farlo è la demo live.
  - Vuol dire che risolverò durante il tempo della presentazione risolverò 
    un esercizio di deployment.
  - L'esercizio è molto semplificato, è molto semplice
  - L'esercizio non è realistico però è comunque rappresentativo di quello che succede nella realtà.
  - Mi è sembrato il modo migliore per fare vedere il mio modo di lavorare.


Regole:

  - implementerò una feature alla volta
  - mi terrò una lista di cose da fare, una TODO list
  - prima di implementare ogni feature progetterò un test per verificare che la feature venga implementata
  - all'inizio dovrei avere il test che fallisce (ROSSO)
  - poi implemento la feature e il test dovrebbe cominciare a passare (VERDE)
  - di solito ogni volta che il test passa committo
  - quando sono in barra VERDE è possibile che decida di rivedere la struttura dello script per migliorarlo senza cambiare il comportanmento (REFACTOR)
  - potrebbe essere che mentre cerco di implementare una feature mi incarto perché mi è sfuggito qualcosa
  - in questi casi fermo tutto, faccio revert all'ultimo momento in cui funzionava tutto e riparto
  - se durante il lavoro mi accorgo che per continuare manca qualche pezzo, mi fermerò, aggiungerò la feature sulla TODO list e poi ricomincerò.
  - per riuscire ho bisogno di concentrarmi e avrei bisogno che il pubblico facesse silenzio, soprattutto quando sono in barra rossa (cioè quando qualcosa non va)
  - in particolare, durante la barra rossa, i suggerimenti non ti aiutano per nulla, se ho bisogno chiedo io.
  
Step dell'esercizio:

  - 0) il deploy script tocca la macchina (uname -a) usando SSH
  - 1) deploy di una pagina statica (hello-world.txt)
  - 2) deploy di una servlet java

Come lo risolvo:

  - userò strumenti molto semplici: Vim, SSH, e Bash
  - condividerò un terminale con due tab: uno per la macchina ospite e uno con la macchina target
  - la macchina target è una macchina creata con Vagrant
  - ma cercherermo fin da suibito di fare uno script che possa funzionare con le macchine di produzione

Checklist:

  - (todo) fare un test per il controllo della porta 80
  - (todo) mettere un file in /etc/nginx/conf.d/*.conf
  - (note) rsync -e 'ssh -F vagrant.ssh-config' to-deploy-01/hello-world.txt default:
  - (todo) update virtualbox
  - (todo) fix Kaleidoscope
  - (todo) provision: apt-get install curl
  - (todo) move out to-be-tested
  - spegnere Dropbox
  - CONDIVIDERE LO SCHERMO
  - fare restart della vagrant
    vagrant destroy -f && vagrant up
  - oppure fare il provision: vagrant provision
  - disabilitare il provisioning (scrivendo exit come prima riga)
  - reset
    unalias d; unalias c; unalias t;
    git rm -f \
      vagrant.ssh-config \
      script/deploy
    git commit -m "Reset" -a
  - check esistenza 'Host default' da ~/.ssh-config (con grep)
  - ricordarsi di far partire la registrazione

Passi:


Requisiti aggiuntivi:

  - la servlet per funzionare richiede MySQL
  - la servlet che richiede il Sun di Oracle
  - per testare la servlet bisogna fare una fixture sul database
  - la configurazione di connessione al database cambia dall'ambiente di produzione a quello di produzione

Notes:

  - (vagrant) la macchina vagrant si chiama 'default' perché 'default' è il nome di default
  - (test) diff <(curl -s http://localhost:10080/) - <<< 'Hello World'
  - (vagrant) Snapshot:
     - vagrant snapshot save start
     - vagrant snapshot restore start
  - (todo) config.vm.hostname
  - sberla: source_rel() { source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$1" }
  - GIT_SSH_COMMAND="ssh -F vagrant.ssh-config" \
      git push target:/home/vagrant/repo.git master
  - vagrant ssh-config --host target
  - how to install git:
    - git --version || sudo apt-get install git-core -y
  - copiare un file usando rsync over SSH:
    - rsync hello-world target:
  - how to create a bare repository:
    - ssh target 'mkdir -p repo.git && cd repo.git && git init --bare'
  - how to create the working copy (non idempotent)
    - git clone repo.git/ working-copy
  - java servlet compiling:
    - javac -cp lib/servlet-api.jar example/HelloWorld.java
  - copy .class:
    - ssh target 'ls /var/lib/tomcat7/webapps/ROOT/WEB-INF/classes/HelloWorld.class'
  - check tomcat
    - ls downloads/apache-tomcat-7.0.68.tar.gz
  - tomcat has been downloaded from here:  
    - wget http://it.apache.contactlab.it/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.tar.gz
  - tomcat directories:
    - /etc/default/tomcat7 (file di configurazione)
    - /usr/share/tomcat7-admin/manager (applicazione manager)
    - /usr/share/tomcat7/lib (librerie tomcat)
    - /usr/lib/jvm/java-8-oracle
    - /var/lib/tomcat7/webapps
  - modi per risolvere: zsh: exec format error: script/deploy
    - mettere :
    - mettere " "
    - mettere true
    - mettere #!/bin/bash
  - Prompt
    - barra verde/rossa nel prompt della Bash:
      - PS1="\`if [ \$? = 0 ]; then printf \[\e[32m\]; else printf \[\e[31m\]; fi; printf \\$\e[0m\] \` $PS1"
    - prompt semplice in Zsh:
      - PS2="> "
    - Zsh:
      export PROMPT=$'%{\e[0;%(?.32.31)m%}'$'%(?.OK.KO)'" \$"$'%{\e[0m%}'" " # testing prompt
      export PS2="> " # simple continuation prompt
  - linea Vagrantfile per forwardare tomcat:
    - config.vm.network "forwarded_port", guest: 8080, host: 8080
  - l'uso di SSH config
    - vagrant ssh-config >> ~/.ssh/config
  - git log  --oneline --graph --color
  - data dir: - vagrant ssh -c "ls /vagrant"
  - curl --silent --output /dev/null --write-out "%{http_code}"  "http://localhost:8080/"
  - deploy della servlet:
    cp /vagrant/.../HelloWorld.class /var/lib/tomcat7/webapps/ROOT
  - Java
    - sudo add-apt-repository "deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main" --yes 
    - sudo apt-get update
    - echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
    - echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
    - sudo apt-get install oracle-java7-installer --yes --force-yes # --force-yes per evitare problemi di chiave
  - tutorial http://www.tutorialspoint.com/servlets/servlets-first-example.htm

mkdir -p /var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml
cat >/var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml << \'
<servlet>
   <servlet-name>HelloWorld</servlet-name>
   <servlet-class>HelloWorld</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>HelloWorld</servlet-name>
   <url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
'

Per installare mysql senza dover mettere la password:

    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password my_password'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password my_password'
    sudo apt-get -y install mysql-server

Per sapere le selections:

    sudo apt-get install -y debconf-utils
    debconf-get-selections

  - curl --silent --output /dev/null  --write-out "%{http_code}"  "http://localhost:8080/hello-world"
  - -> 200 not 404
