Problema da risolvere:

  - Scrivere uno script di deploy che faccia il deploy automatico di un software su un server
  - Il server è una macchina Vagrant accessibile con "vagrant ssh"
  - La macchina dovrebbe essere già stata creata e provisionata
  - Il software da installare cambierà nel tempo, come succede nella realtà.
  - Immaginatevi che all'inizio sia un software molto semplice

Regole:

  - si implementa una feature alla volta ("wip = 1")
  - abbiamo un elenco di feature ("To Do List")
  - le feature fatte le marchiamo DONE
  - prima di partire con l'implementazione spiegare il test
  - se nascono delle nuove esigenze si aggiorna la todo list

Problema:

  - il deploy script tocca la macchina (uname -a)
  - il deploy script usa ssh puro (non vagrant ssh), lo scopo finale è avere uno script che può funzionare anche in produzione (dove c'è SSH ma non c'è Vagrant)
  - il deploy script installa una pagina statica (hello-world.txt)
  - il deploy script installa la pagina statica su nginx
  - il software da installare è una classe .java
  - la macchina target risponde in HTTP sulla sua porta 80
  - la macchina risponde in HTTP su 8080
  - la servlet per funzionare richiede MySQL
  - la servlet che richiede il Sun di Oracle
  - per testare la servlet bisogna fare una fixture sul database
  - la configurazione di connessione al database cambia dall'ambiente di produzione a quello di produzione
  - deployare una specifica versione

Notes:

  - (todo) config.vm.hostname
  - sberla: source_rel() { source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$1" }
  - GIT_SSH_COMMAND="ssh -F vagrant.ssh-config" \
      git push target:/home/vagrant/repo.git master
  - vagrant ssh-config --host target
  - how to install git:
    - git --version || sudo apt-get install git-core -y
  - copiare un file usando rsync over SSH:
    - rsync hello-world target:
  - how to create a bare repository:
    - ssh target 'mkdir -p repo.git && cd repo.git && git init --bare'
  - how to create the working copy (non idempotent)
    - git clone repo.git/ working-copy
  - java servlet compiling:
    - javac -cp lib/servlet-api.jar example/HelloWorld.java
  - copy .class:
    - ssh target 'ls /var/lib/tomcat7/webapps/ROOT/WEB-INF/classes/HelloWorld.class'
  - check tomcat
    - ls downloads/apache-tomcat-7.0.68.tar.gz
  - tomcat has been downloaded from here:  
    - wget http://it.apache.contactlab.it/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.tar.gz
  - tomcat directories:
    - /etc/default/tomcat7 (file di configurazione)
    - /usr/share/tomcat7-admin/manager (applicazione manager)
    - /usr/share/tomcat7/lib (librerie tomcat)
    - /usr/lib/jvm/java-8-oracle
    - /var/lib/tomcat7/webapps
  - modi per risolvere: zsh: exec format error: script/deploy
    - mettere :
    - mettere " "
    - mettere true
    - mettere #!/bin/bash
  - Prompt
    - barra verde/rossa nel prompt della Bash:
      - PS1="\`if [ \$? = 0 ]; then printf \[\e[32m\]; else printf \[\e[31m\]; fi; printf \\$\e[0m\] \` $PS1"
    - prompt semplice in Zsh:
      - PS2="> "
    - Zsh:
      export PROMPT=$'%{\e[0;%(?.32.31)m%}'$'%(?.OK.KO)'" \$"$'%{\e[0m%}'" " # testing prompt
      export PS2="> " # simple continuation prompt
  - linea Vagrantfile per forwardare tomcat:
    - config.vm.network "forwarded_port", guest: 8080, host: 8080
  - l'uso di SSH config
    - vagrant ssh-config >> ~/.ssh/config
  - ssh -i .vagrant/machines/default/virtualbox/private_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  -p 2222 -l vagrant  localhost
  - git log  --oneline --graph --color
  - data dir: - vagrant ssh -c "ls /vagrant"
  - curl --silent --output /dev/null --write-out "%{http_code}"  "http://localhost:8080/"
  - deploy della servlet:
    cp /vagrant/.../HelloWorld.class /var/lib/tomcat7/webapps/ROOT

Altre note:

  - tutorial http://www.tutorialspoint.com/servlets/servlets-first-example.htm

mkdir -p /var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml
cat >/var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml << \'
<servlet>
   <servlet-name>HelloWorld</servlet-name>
   <servlet-class>HelloWorld</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>HelloWorld</servlet-name>
   <url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
'

Per installare mysql senza dover mettere la password:

    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password my_password'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password my_password'
    sudo apt-get -y install mysql-server

Per sapere le selections:

    sudo apt-get install -y debconf-utils
    debconf-get-selections
  

Notes from an acient test-all script:

set -o errexit

source ~/.zshrc.local

# quando però gli passo il messaggio usa quello per fare commmit
wiki_commit "Messaggio" echo > actual
diff -u <(cat << \"
cd /Users/andrea/Dropbox/wiki
git commit -am "Messaggio"
"
) actual

# quando non gli passo niente, a parte (echo), il messaggio di commit è "."
wiki_commit echo > actual
diff -u <(cat << \"
cd /Users/andrea/Dropbox/wiki
git commit -am .
"
) actual

# test math 1+1 == 2
echo "1+1" | bc > actual
diff -u <(echo "2") actual

- TODO deploy should install the servlet:
  - curl --silent --output /dev/null  --write-out "%{http_code}"  "http://localhost:8080/hello-world"
  - -> 200 not 404
