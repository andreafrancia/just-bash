Specifiche:

Pushare 

- TODO deploy should install the servlet:
  - curl --silent --output /dev/null  --write-out "%{http_code}"  "http://localhost:8080/hello-world"
  - -> 200 not 404

Regole:

  - (rule) sviluppiamo una feature alla volta
  - (rule) per lo sviluppo dello script di deploy usiamo le tecniche di sviluppo tipiche del TDD
  - (rule) c'è un elenco di features che chiamiamo TODO list
  - (rule) la TODO list parte con pochi (o anche un punto) che è l'acceptance test finale
  - (rule) l'obiettivo è creare uno script di deploy in grado di deployare una stupida servlet
  - (rule) sotto ogni specifica mettiamo il test, il test è un comando della shell che deve passare
  - (requisito) single command deploy: script/deploy
  - (requisito) lo script di deploy tocca la macchina (uname -a)
  - (requisito) lo script di deploy installa tomcat 
  - (requisito) deployare "Hello World" con file statico
  - (requisito) deployare una specifica versione
  - (requisito) la servlet per funzionare richiede MySQL
  - (requisito) la servlet che richiede il Sun di Oracle
  - (requisito) per testare la servlet bisogna fare una fixture sul database
  - (requisito) la configurazione di connessione al database cambia dall'ambiente di produzione a quello di produzione
  - (spiego) trucco del cd tra parentesi
  - (spiego) l'idempotenza prevista: mkdir -> mkdir -p
  - (spiego) l'idempotenza con sonda: nginx --version || apt-get install nginx -y
  - (spiego) l'idempotenza con sovrascrittura: ln -s -> ln -sf
  - (spiego) l'idempotenza con preparazione: ln -s -> rm -f target && ln -s source target

Checklist:

  - fare il reset:
    - git rm script/deploy && git commit -m "Reset" script/deploy
  - vagrant destroy && vagrant up
  - togliere 'Host default' da ~/.ssh-config
  - verificare che il copia e incolla su vim funziona

Notes:

  - pushare il repository sulla macchina:
    - git push ssh://vagrant@default/home/vagrant/repo.git HEAD
  - how to install git:
    - git --version || sudo apt-get install git-core -y
  - how to create a bare repository:
    - ssh default 'mkdir -p repo.git && cd repo.git && git init --bare'
  - how to create the working copy (non idempotent)
    - git clone repo.git/ working-copy
  - idempotent create a working copy
    - mkdir -p working-copy && (
      cd working-copy && 
      git init && 
      ( git remote rm origin || true ) && 
      git remote add -f origin ../repo.git && 
      git fetch -u origin master &&
      git checkout master
      )
  - java servlet compiling:
    - javac -cp lib/servlet-api.jar example/HelloWorld.java
  - copy .class:
    - ssh default 'ls /var/lib/tomcat7/webapps/ROOT/WEB-INF/classes/HelloWorld.class'
  - check tomcat
    - ls downloads/apache-tomcat-7.0.68.tar.gz
  - tomcat has been downloaded from here:  
    - wget http://it.apache.contactlab.it/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.tar.gz
  - tomcat directories:
    - /etc/default/tomcat7 (file di configurazione)
    - /usr/share/tomcat7-admin/manager (applicazione manager)
    - /usr/share/tomcat7/lib (librerie tomcat)
    - /usr/lib/jvm/java-8-oracle
    - /var/lib/tomcat7/webapps
  - modi per risolvere: zsh: exec format error: script/deploy
    - mettere :
    - mettere true
    - mettere #!/bin/bash
  - barra verde/rossa nel prompt della Bash:
    - PS1="\`if [ \$? = 0 ]; then printf \[\e[32m\]; else printf \[\e[31m\]; fi; printf \\$\e[0m\] \` $PS1"
  - linea Vagrantfile per forwardare tomcat:
    - config.vm.network "forwarded_port", guest: 8080, host: 8080
  - alias pazzia:
    - alias improved='diff <(git status --short) - <<< " M hello-world-servlet.txt" && git commit -m "Improved" hello-world-servlet.txt'
  - accedere alla vagrant usando ssh pulito:
    - vagrant ssh-config >> ~/.ssh/config
  - copiare un file usando rsync over SSH:
    - rsync Vagrantfile default:
  - ssh -i .vagrant/machines/default/virtualbox/private_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  -p 2222 -l vagrant  localhost
  - git log  --oneline --graph --color
  - git config --global alias.st "status"


TODO:

  - installare MacVim che prende anche la copia tipo commmand+C
  - definire cosa intendo quando dico che lo "script crasha"
  - aggiungere linea di comando che mette l'exit code nel PROMPT
  - curl --silent --output /dev/null --write-out "%{http_code}"  "http://localhost:8080/"
  
- deploy della servlet:
  cp /vagrant/.../HelloWorld.class /var/lib/tomcat7/webapps/ROOT
- data dir:
  - vagrant ssh -c "ls /vagrant"
- don't update all the times
- deployare tomcat
- deployare la servlet
- tutorial http://www.tutorialspoint.com/servlets/servlets-first-example.htm





mkdir -p /var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml
cat >/var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml << \'
<servlet>
   <servlet-name>HelloWorld</servlet-name>
   <servlet-class>HelloWorld</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>HelloWorld</servlet-name>
   <url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
'
