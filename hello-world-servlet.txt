Specifiche:

  - TODO deploy should install the servlet:
    - curl --silent --output /dev/null  --write-out "%{http_code}"  "http://localhost:8080/hello-world"
    - -> 200 not 404
  - TODO should copy the class file:
    - ssh default 'ls /var/lib/tomcat7/webapps/ROOT/WEB-INF/classes/HelloWorld.class'
  - DONE sono in grado di copiare un file su Vagrant:
    - rsync Vagrantfile default:
  - DONE accedere alla vagrant usando ssh pulito
    - vagrant ssh-config >> ~/.ssh/config
  - DONE there is a single command for deploy
    - script/deploy
  - DONE we should be able to compile the servlet:
    - javac -cp lib/servlet-api.jar example/HelloWorld.java
  - DONE we should have a tomcat version:
    - ls downloads/apache-tomcat-7.0.68.tar.gz

Regole:

  - (rule) sviluppiamo una feature alla volta
  - (rule) per lo sviluppo dello script di deploy usiamo le tecniche di sviluppo tipiche del TDD
  - (rule) c'è un elenco di features che chiamiamo TODO list
  - (rule) la TODO list parte con pochi (o anche un punto) che è l'acceptance test finale
  - (rule) l'obiettivo è creare uno script di deploy in grado di deployare una stupida servlet
  - (rule) sotto ogni specifica mettiamo il test, il test è un comando della shell che deve passare
  - (requisiti extra) la servlet per funzionare richiede MySQL
  - (requisiti extra) la servlet che richiede il Sun di Oracle
  - (requisiti extra) per testare la servlet bisogna fare una fixture sul database
  - (requisiti extra) la configurazione di connessione al database cambia dall'ambiente di produzione a quello di produzione

Notes:

  - tomcat has been downloaded from here:  
    - wget http://it.apache.contactlab.it/tomcat/tomcat-7/v7.0.68/bin/apache-tomcat-7.0.68.tar.gz
  - tomcat directories:
    - /etc/default/tomcat7 (file di configurazione)
    - /usr/share/tomcat7-admin/manager (applicazione manager)
    - /usr/share/tomcat7/lib (librerie tomcat)
    - /usr/lib/jvm/java-8-oracle
    - /var/lib/tomcat7/webapps
  - modi per risolvere: zsh: exec format error: script/deploy
    - mettere :
    - mettere true
    - mettere #!/bin/bash
  - barra verde/rossa nel prompt della Bash:
    - PS1="\`if [ \$? = 0 ]; then printf \[\e[32m\]; else printf \[\e[31m\]; fi; printf =====\e[0m\] \` $PS1"
  - linea Vagrantfile per forwardare tomcat:
    - config.vm.network "forwarded_port", guest: 8080, host: 8080
  - alias pazzia:
    - alias improved='diff <(git status --short) - <<< " M hello-world-servlet.txt" && git commit -m "Improved" hello-world-servlet.txt'
  - ssh -i .vagrant/machines/default/virtualbox/private_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  -p 2222 -l vagrant  localhost

TODO:

  - installare MacVim che prende anche la copia tipo commmand+C
  - definire cosa intendo quando dico che lo "script crasha"
  - aggiungere linea di comando che mette l'exit code nel PROMPT
  - curl --silent --output /dev/null --write-out "%{http_code}"  "http://localhost:8080/"
  - 
  
- deploy della servlet:
  cp /vagrant/.../HelloWorld.class /var/lib/tomcat7/webapps/ROOT
- data dir:
  - vagrant ssh -c "ls /vagrant"
- don't update all the times

- deployare tomcat
- deployare la servlet
- tutorial http://www.tutorialspoint.com/servlets/servlets-first-example.htm





mkdir -p /var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml
cat >/var/lib/tomcat7/webapps/ROOT/WEB-INF/web.xml << \'
<servlet>
   <servlet-name>HelloWorld</servlet-name>
   <servlet-class>HelloWorld</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>HelloWorld</servlet-name>
   <url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
'
